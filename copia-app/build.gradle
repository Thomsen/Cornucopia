
apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
//    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.cornucopia"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        compileOptions {
            sourceCompatibility rootProject.ext.javaVersion
            targetCompatibility rootProject.ext.javaVersion
        }

        testApplicationId "com.cornucopia.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue("string", "PORT_NUMBER", "8081")
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    configurations {
        all*.exclude group: 'org.apache.commons'
    }

    lintOptions {
        abortOnError false // MissingPermission
    }
}

dependencies {
    implementation project(':copia-mvp')
    implementation project(':copia-component')
//    implementation project(':copia-patch')
    implementation project(':copia-kotlin')

    // This is the old method and no longer works for local
    // library modules:
    // debugCompile project(path: ':foo', configuration: 'debug')
    // releaseCompile project(path: ':foo', configuration: 'release')

    // Instead, simply use the following to take advantage of
    // variant-aware dependency resolution. You can learn more about
    // the 'implementation' configuration in the section about
    // new dependency configurations.
    implementation project(':copia-aspect')

    // You can, however, keep using variant-specific configurations when
    // targeting external dependencies. The following line adds 'app-magic'
    // as a dependency to only the 'debug' version of your module.
    // debugImplementation 'com.example.android:app-magic:12.3'

//    implementation files('libs/BaiduLBS_Android.jar')
//    implementation files('libs/httpmime-4.1.2.jar')
//    implementation files('libs/IndoorscapeAlbumPlugin.jar')

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.volley:volley:1.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.squareup.okio:okio:1.6.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.octo.android.robospice:robospice:1.4.14'
    implementation 'com.taobao.android:dexposed:0.1.1@aar'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
//    implementation 'io.reactivex:rxjava:1.1.10'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation 'com.google.dagger:dagger:2.9'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.9'

    implementation "com.jakewharton:butterknife:$rootProject.ext.butternifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butternifeVersion"

    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.8.7'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.8.7'
    implementation 'com.alibaba:fastjson:1.2.29'
    implementation 'com.facebook.fresco:fresco:1.1.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    implementation 'com.bugsnag:bugsnag-android:3.8.0'

    implementation "org.aspectj:aspectjrt:$rootProject.aspectjVersion"

    // jitpack.io
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.1'

    // support-v4 sub
    //noinspection GradleCompatible
    implementation "com.android.support:support-compat:$rootProject.supportLibVersion"
    //noinspection GradleCompatible
    implementation "com.android.support:support-fragment:$rootProject.supportLibVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibVersion"
    implementation 'com.android.support:multidex:1.0.1'
    implementation deps.support.appCompat
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibVersion"
    implementation "com.android.support:design:$rootProject.supportLibVersion"


    implementation 'com.facebook.stetho:stetho:1.5.0'

    // sqlite
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.0'

    implementation 'io.flowup:android-sdk:0.3.0'
    testImplementation 'io.flowup:android-sdk-no-op:0.3.0'
}

// Duplicate zip entry [92.jar:io/realm/BuildConfig.class]
realm {
    syncEnabled = true
}

// Duplicate zip entry [io/realm/b$a.class == 92.jar:io/realm/BaseRealm$RealmObjectContext.class]

apply from: 'proguard.gradle'

// copia module
apply plugin: 'copia'

//moduleConfig {
//    module = "gradle plugin test"
//}

final def log = project.logger
final def variants = project.android.applicationVariants

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

// building execute
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}